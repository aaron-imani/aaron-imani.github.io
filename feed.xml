<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://aaron-imani.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aaron-imani.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-09T23:47:37+00:00</updated><id>https://aaron-imani.github.io/feed.xml</id><title type="html">blank</title><subtitle>The personal website of Aaron Imani, a PhD student in software engineering at UC Irvine. </subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://aaron-imani.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://aaron-imani.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://aaron-imani.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">A Straightforward Guide to Setup tensorflow-gpu on Linux</title><link href="https://aaron-imani.github.io/blog/2022/a-straightforward-guide-to-setup-tensorflow-gpu-on-linux/" rel="alternate" type="text/html" title="A Straightforward Guide to Setup tensorflow-gpu on Linux"/><published>2022-11-02T03:11:25+00:00</published><updated>2022-11-02T03:11:25+00:00</updated><id>https://aaron-imani.github.io/blog/2022/a-straightforward-guide-to-setup-tensorflow-gpu-on-linux</id><content type="html" xml:base="https://aaron-imani.github.io/blog/2022/a-straightforward-guide-to-setup-tensorflow-gpu-on-linux/"><![CDATA[<p>In the course of using an HPC cluster for training a deep learning text classification model, I needed to set the environment up by installing tensorflow-gpu, tensorflow-text, and tensorflow_hub. However, it didn’t go well, as none of the online resources yielded the correct result. By installing tensorflow-gpu using conda install tensorflow-gpu the problem is that at the time of writing this story, this command ended up installing tensorflow-gpu==2.4.0 that was incompatible with tensorflow-text version, which was 2.10.0. I tried installing tensorflow-text of the same version of the tensorflow-gpu , but the problem is that the oldest version available on conda was 2.5.0, which was still incompatible. Long story short, after hours of struggling with the issue, I hereby release the solution that worked for me for setting up an HPC cluster for training deep learning models using Tensorflow on GPU resources.</p> <p>1- Install a version of <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html">miniconda</a> on the machine and initialize it</p> <p>2- Run the following commands to setup the environment for tensorflow-gpu :</p> <iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4c27978056db36caff8436eb66455481/href">https://medium.com/media/4c27978056db36caff8436eb66455481/href</a></iframe> <p>Of course, you can change the version in line 5 with any version of tensorflow that you want.</p> <p>3- To ensure tensorflow-gpu has been set up properly to use the GPU resources, run the following command:</p> <pre>conda activate tf_gpu</pre> <pre>python -c &quot;import tensorflow as tf; print(tf.config.list_physical_devices(&#39;GPU&#39;))&quot;</pre> <p>Happy coding!</p> <h4>References</h4> <p>1- <a href="https://www.tensorflow.org/install/pip">https://www.tensorflow.org/install/pip</a></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2d6cb4c9f469" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">How to Create a Modern CV For FREE On Overleaf</title><link href="https://aaron-imani.github.io/blog/2022/how-to-create-a-modern-cv-for-free-on-overleaf/" rel="alternate" type="text/html" title="How to Create a Modern CV For FREE On Overleaf"/><published>2022-08-21T03:42:23+00:00</published><updated>2022-08-21T03:42:23+00:00</updated><id>https://aaron-imani.github.io/blog/2022/how-to-create-a-modern-cv-for-free-on-overleaf</id><content type="html" xml:base="https://aaron-imani.github.io/blog/2022/how-to-create-a-modern-cv-for-free-on-overleaf/"><![CDATA[<p>After months of not updating my Curriculum Vitae (CV), it was too outdated to be modified. I looked for some free templates for creating a CV from scratch or online service that helps me do it free. However, my Google search results were discouraging. Therefore, I decided to modify the WORD document I used to write my old CV. Struggling with Microsoft Word in a document with images, horizontal lines, and other elements except the text is too exhausting for me. This led me to find an easier way to create a modern CV for free and hassle-less. In this story, I will provide a step-by-step guide to creating your own stylish CV on Overleaf without spending a dime.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*a7WQ95AUU-zQu8hXBXA3nA.png"/><figcaption>The Sample CV you can create by reading this Story</figcaption></figure> <p><a href="https://overleaf.com">Overleaf</a> is an online LateX editor for creating and managing documents. One good thing with Overleaf is that no matter what kind of document you want to create, there are always free templates for that! So, why not use Overleaf to create our CV? You might say: “Well, I don’t know the LateX syntax!” but you will be just fine with reading this story!</p> <h3>Find The Right Template</h3> <p>The first step to creating a CV on Overleaf is to find a suitable template for you! There are dozens of free templates for CV/Résumé on Overleaf. You can browse them <a href="https://www.overleaf.com/gallery/tagged/cv">here</a>. Depending on the template&#39;s structure, how it has organized the CV sections, and any other personal criteria you might think of, you can choose one of the templates on which to build your CV. After choosing a template, let’s say your choice is my favourite template, <a href="https://www.overleaf.com/latex/templates/awesome-cv/dfnvtnhzhhbm">Awesome CV</a>, click on the Open as Template button on the template page. It will create a new project on your Overleaf account with the selected template. If you don’t have an Overleaf account, you should create an account at this step to continue.</p> <h3>Browsing The Template Files</h3> <p>Now that an Overleaf project has been built from our selected template, it is time to browse the template files and find a general sight of what they are meant for. Below is a screenshot of a project created from the Awesome CV template I mentioned. On the left part of the screenshot, we can see the files and folders of the project. Following, I explain what the files and folders contain to know which files are meant to be modified. If you are familiar with LateX templates, feel free to skip to “<strong>Modifying The CV</strong>”.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*LECui-u0Xi-YcmJ4O5C2Qg.png"/><figcaption>Overleaf project created based on the Awesome CV template mentioned earlier.</figcaption></figure> <h4>CLS Files</h4> <p>Usually, there is at least one .cls file in each project that has been created from a template. This file contains a set of rules in LateX syntax that <strong>define the general structure and appearance of the final generated document</strong>. In our case, the file is called awesome-cv.cls.</p> <h4>Folders</h4> <p>The folders usually are consisted of the fonts, graphics, and other dependencies that the .cls file(s) relies on as well as a set of .tex files.</p> <h4>TEX Files</h4> <p>The files that include the visible contents of the generated document have the .tex extension at the end of their names. Unlike the cls file, there are usually multiple .tex files inside a project to keep each of them concise and to organize the files better. Typically, each .tex file represents a section in the generated CV. On the existence of multiple .tex files, one should be selected as the main document to be compiled by Overleaf. This can be done by clicking on the <strong>Menu</strong> button on the top left of the screen and locating the main document dropdown. Usually, the files you should select are located at the top level of the project, while the sections that create the final document appear in the folders. In our case, we can see three .tex files at the project&#39;s top level, e.g., resume.tex, coverletter.tex, and resume.tex.</p> <figure><img alt="tex files at the top level of the project on Overleaf" src="https://cdn-images-1.medium.com/max/438/1*rr0i9v7WCobHDIJqbngnSw.png"/></figure> <p>We can choose the corresponding .e main document from the menu depending on what document we want. Let’s select cv.tex for the main document since our mission is to create a CV.</p> <h3>Understanding The Template’s Structure</h3> <p>Now that we know what the files contain and we have selected our main document, the next thing we should do is to understand the structure of our proposed main document. In our case, if we click oncv.tex, we can see there are mainly two parts. The first part of the document that is before the \begin{document} line (Line 80) includes the below materials:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*v0mIr-hOBT_C2AOfAR2h_Q.png"/></figure> <p>As the <strong>comment (Texts in gray colour)</strong> suggests on the top of the screenshot, this portion of the TEX file includes the configurations of generated CV. Instructions have been given on how to change the configuration. For example, changing the colour of highlights to sky blue is possible by changing line 32 of the above screenshot to \colorlet{awesome}{awesome-sky blue}. Please note that the colour options have been given in lines 30 and 31. If you are unfamiliar with LateX parameters, I advise you to read <a href="https://www.overleaf.com/learn/latex/Commands">this article</a>. It will help you to customize the configuration by modifying the commands’ parameters.</p> <p>Following the configuration lines, we observe a part for entering our personal information to be printed on top of the CV. Please note that some lines are commented and can be uncommented by simply removing % at the beginning of the desired comment line. For instance, one can add their Medium profile by uncommenting line 70 in the screenshot below and replacing medium-id with their actual Medium ID like @alireza_imn (Don&#39;t use my ID, though).</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*SwOXjTYievPAeABz2ZUTog.png"/></figure> <p>The next part of this TEX file includes multiple tex files consecutively to generate the CV sections. Using the \input{} command multiple TEX files have been imported in lines 98–105. The order of the contents of the files in the final document will be the same as the order they have been imported.</p> <figure><img alt="The imported .Tex files in the main document" src="https://cdn-images-1.medium.com/max/1024/1*dHAXLu8mBfhtNRummUNm5Q.png"/><figcaption>The imported tex files in the main document</figcaption></figure> <h3><strong>Modifying The CV</strong></h3> <p>Being familiar with the structure of the main document besides the project files, we can start modifying the TEX files that have been imported to the main document, as explained above. Take the first imported .tex file on line 98 in the screenshot above as an example. Try locating it in the project files and opening it.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eE0eUpP7w3tl6_bV99Kryw.png"/><figcaption>Locating education.tex and opening it</figcaption></figure> <p>Since education.tex is the first imported tex file in the main document, we can see in the above screenshot that Education is on top of the compiled PDF file. In the editor, try changing the values between brackets in lines 14–22 and observe the changes by clicking the Recompile button on top of the compiled PDF preview. Once you realize how changing the bracket values affects the CV, you can replicate the \cventry command by simply copying and pasting lines 13–21 anywhere before \end{cventries}. You could successfully edit the first section of your CV! You can do the same tricks on the other sections by locating the corresponding .tex files and editing them. You can also add your .tex file by following one of the .tex files included in the main document and including the newly added .tex file to the main document by giving the right path to the file in the \input{path-to-your-tex-file.tex} command. This command can appear anywhere between the \input lines in the main document (lines 98–107).</p> <p>Reading this story, you are now familiar with how to use FREE Overleaf templates to create your CV. You don’t have to deal with the layout, design, or anything unless you want to customize the template, and this is the power of using an Overleaf template. It saves your time, energy, and money and makes you concentrate on the content rather than the layout. Should you have any questions, we can discuss them below this story.</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=67c634d471d1" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Key Thoughts To Succeed</title><link href="https://aaron-imani.github.io/blog/2022/key-thoughts-to-succeed/" rel="alternate" type="text/html" title="Key Thoughts To Succeed"/><published>2022-07-18T05:24:08+00:00</published><updated>2022-07-18T05:24:08+00:00</updated><id>https://aaron-imani.github.io/blog/2022/key-thoughts-to-succeed</id><content type="html" xml:base="https://aaron-imani.github.io/blog/2022/key-thoughts-to-succeed/"><![CDATA[<h3>The Secret Formula to Succeed</h3> <figure><img alt="" src="https://cdn-images-1.medium.com/max/640/0*ZUUx8xs-wSgZuwK4"/><figcaption>The Krabby Patty Secret¹</figcaption></figure> <p>There are dozens of books, seminars, webinars, etc., by well-known writers/speakers on how to succeed in what we want. In this story, I will briefly share the thoughts that have helped me so far to become successful in reaching my life goals. These thoughts might appear simple initially, but adhering to them requires practice.</p> <h3>1- Think BIG, SET a Goal.</h3> <p>It is essential to set goals for our foreseeable future. Some people spend their days one after the other without knowing that they are always making transitions in different phases of their life. Therefore, it is crucial to always think of “What comes next?”, “What is my next step?”, “After finishing this phase, what am I willing to do?”. I have seen many people who, by the time they have come up with a goal, have lost so much time that could have been spent trying to reach the goal.</p> <p>The other aspect that should be considered is how big we think when defining goals for our life. Small goals seem more reachable to our minds, making us not try hard enough to reach them. When the goal seems enormous to us, it becomes a big deal when we think of it, and consequently, we will try harder to reach it because we know it will not be easy to make that happen!</p> <h3>2- Set Proper PRIORITIES.</h3> <p>It is OK to start learning Piano, but when you have a University entrance test within 6 months from now, doing so does not seem like the best decision. Setting proper priorities is a must when it comes to planning to reach a goal. One might complain that “what if I am too focused on my goal?”, “I am not living a good life”, etc. Since nothing will happen unless the required steps have been taken and we got 24 hours a day to live, we are always sacrificing some of our favourite activities in the short term to reach a goal that affects our life in the long term. Note that if our goal is not BIG enough for ourselves, it will be hard to put the required activities to reach it as our high-priority daily tasks.</p> <h3>3- Always Do your BEST!</h3> <p>When doing anything, always do your best. This is one of the key thoughts that has always helped me during my life. Putting your maximum effort into something will have a high chance of making your results the best among those doing the same thing without putting their best effort into it. One is unlikely to achieve the best results without doing their best. Furthermore, <strong>if you do not do your best, you are not making the best use of your time.</strong></p> <h3>4- Do the HARD thing!</h3> <p>One of the many reasons there aren’t a million Elon Musks out there is that people naturally avoid doing hard things! When they are students, they try to get the minimum score that won’t affect their studies; Their work is as good as not being fired when they are employees. Therefore, one of the most obvious yet most difficult ways to succeed is to find those <strong>hard things that no one else would ever think of doing</strong>, and pursue them. A hard path has the advantage that few people are racing against you on it, so you have <strong>fewer rivals</strong> and, as a result, a higher chance of winning!</p> <h3>5- Always IMAGINE the time/moment you have reached your goal.</h3> <p>When one is working hard to achieve their goal, it is necessary to create and retain a variety of motivations. Imagining the time/moment when the goal you are working toward has occurred is an effective method of staying motivated while trying hard. Make it <strong>believable</strong> for yourself by <strong>picturing it in the most detail possible.</strong> This will not only keep you motivated to reach your goal but will also keep your life focused on achieving what you have imagined in your mind.</p> <p>These are some of the most important thoughts I have had that have led me to where I stand. If you do not mind sharing your ideas, I would greatly appreciate hearing your thoughts!</p> <h3>References</h3> <p>1- <a href="https://custom-cursor.com/fr/collection/spongebob/sb-plankton-secret-formula">https://custom-cursor.com/fr/collection/spongebob/sb-plankton-secret-formula</a></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=484bdb3ef300" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Enforce Abstract Methods Signature To Derived Classes in Python</title><link href="https://aaron-imani.github.io/blog/2022/enforce-abstract-methods-signature-to-derived-classes-in-python/" rel="alternate" type="text/html" title="Enforce Abstract Methods Signature To Derived Classes in Python"/><published>2022-07-14T19:53:54+00:00</published><updated>2022-07-14T19:53:54+00:00</updated><id>https://aaron-imani.github.io/blog/2022/enforce-abstract-methods-signature-to-derived-classes-in-python</id><content type="html" xml:base="https://aaron-imani.github.io/blog/2022/enforce-abstract-methods-signature-to-derived-classes-in-python/"><![CDATA[<p>There is a Python module called abc that provides the basics for using abstract baseclasses in Python. Although the abstractmethod decoration provides a way for defining abstract methods, using it is not enough to make sure the derived classes follow the signature of the abstract methods, i.e., using abstractmethod decoration only makes sure that a method with the same name has been defined in the derived classes and they do zero checking about the name and type of the methods’ parameters.</p> <p>In this story, throughout an example, I will explain how to enforce the derived class of an abstract base class in Python to follow the same parameter types and names of the abstract methods’ parameters. In the example below, an abstract base class A has been defined that has an abstractmethod called a. The classes B and C have derived from A, whereas B follows the same signature of the abstract method a, while C does not. By running this script, you will receive a True followed by a False.</p> <iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/962fd6dbbf339effc7c16a0aede3dd60/href">https://medium.com/media/962fd6dbbf339effc7c16a0aede3dd60/href</a></iframe> <p>Throughout using __subclasshook__ one can customize the output of callingissubclass on two given classes. Elaborately, the __subclasshook__ method receives two classes C1 and C2, and returns True if C1 is a subclass of C2. Hence, we have defined __subclasshook__ in our abstract base class A to customize the behaviour of the issubclass method in a way that it returns True if:</p> <p>1- All the abstract methods defined in A are also defined in the derived class</p> <p>2- All the implemented abstract methods in the derived class have accept the exact same parameter as the abstract methods</p> <p>Basically, in the __subclasshook__ method we access the base class and the subclass attributes by accessing the __dict__ of each. Then, we detect the attributes that are function in the base abstract class and return False if:</p> <ul><li>There is no attribute in the subclass that is a function and has the same name.</li></ul> <p>if method_name not in subclass_dict</p> <p>or</p> <ul><li>There is an attribute that is afunction in the subclass with the same name as the corresponding abstratmethod in the abstract base class, <strong>but</strong> it does not have the same __annotations__ as the abstract method.</li></ul> <p>subclass_dict[method_name].__annotations != cls_dict[method_name].__annotations</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a21414943ce6" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">A Quick Guide to Use Scalable Vector Graphics (SVG) on Overleaf</title><link href="https://aaron-imani.github.io/blog/2022/a-quick-guide-to-use-scalable-vector-graphics-svg-on-overleaf/" rel="alternate" type="text/html" title="A Quick Guide to Use Scalable Vector Graphics (SVG) on Overleaf"/><published>2022-06-15T23:43:13+00:00</published><updated>2022-06-15T23:43:13+00:00</updated><id>https://aaron-imani.github.io/blog/2022/a-quick-guide-to-use-scalable-vector-graphics-svg-on-overleaf</id><content type="html" xml:base="https://aaron-imani.github.io/blog/2022/a-quick-guide-to-use-scalable-vector-graphics-svg-on-overleaf/"><![CDATA[<figure><img alt="Overleaf logo" src="https://cdn-images-1.medium.com/max/1024/1*lhZ1Wt8H2O4wO4mhjZWYug.png"/><figcaption>Overleaf logo¹</figcaption></figure> <p>Scalable Vector Graphics (SVG) are sharp images that do not blur on zoom. You may have faced such images in your literature review on different published papers. In this story, I will give quick instructions on how to use such images in your next publication!</p> <p>1- Add the SVG package to your main.tex file on Overleaf by adding the below line <strong>on top</strong> of the file contents. Note that inkspacelatex=false makes all your textual content in the SVG file scale with other contents².</p> <p>\usepackage[inkscapelatex=false]{svg}</p> <p>2- Wherever you want to add an SVG image, use the below syntax instead of using \includegraphics:</p> <pre>\includesvg[width=<strong><em>SIZE</em></strong>\columnwidth]{<strong><em>IMAGE_PATH</em></strong>.svg}</pre> <p>Where SIZE defines the size of the SVG image, and IMAGE_PATH is the relative path to the SVG image uploaded to your Overleaf project. Below is an example of using the above snippet:</p> <pre>\begin{figure}[t!]<br />\centerline{<strong>\includesvg[width=0.75\columnwidth]{Images/context.svg}</strong>}<br />\caption{Example of using SVG on Overleaf}<br />\label{fig: example}<br />\end{figure}</pre> <p>In the above example, width=0.75\columnwidth sets the SVG width to occupy 75% of the column width in a double-column Overleaf document like the IEEE Conference template.</p> <h4>References</h4> <p>1- <a href="https://www.overleaf.com/for/partners/logos">https://www.overleaf.com/for/partners/logos</a></p> <p>2- <a href="https://tex.stackexchange.com/a/498352">https://tex.stackexchange.com/a/498352</a></p> <p>3- <a href="https://mirror.its.dal.ca/ctan/graphics/svg/doc/svg.pdf">https://mirror.its.dal.ca/ctan/graphics/svg/doc/svg.pdf</a></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ca69448f7177" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>